#include <cstdlib>
#include <string>
#include <iostream>
using namespace std;


// header file
// #ifndef HASH_H
// #define HASH_H

class hash {
  private:
    static const int tableSize = 10;  // size of table being used, method to be able to use w/o initializing
    // may be modified to make storing more objects easier, avoiding collisions
    
    struct item {    // custom info we are storing in each item
      string name;
      string drink;
      item* next
    };

    item* HashTable[tableSize]; 

  public:
    hash() {
      for (int i = 0; i < tableSize; i++) {  // initializes entire hash table with "empty" values and null pointers
        HashTable[i] = new item; // pointers point at newly created item
        HashTable[i]->name = "empty";
        HashTable[i]->drink = "empty";
        HashTable[i]->next = NULL;
      }
    }
    int Hash(string key);  // string taken and converted to int to form hash value for hash index
    void AddItem(string name, string drink);
    int NumberOfItemsInIndex(int index);
    void PrintTable();
    void PrintItemsInIndex(int index);
    void FindDrink(string name);

};



// #endif HASH_H

// class file
// #include "hash.h"

int hash::Hash(string key) {
  // divide vaue by table size and remainder is the index, or bucket moreso
  // you can use type casting to convert chars to their ASCII value
  int hash = 0;
  int index;
  
  for (int i = 0; i < key.length(); i++) {
    hash += (int)key[i]; // type casting
  }
  // may change calculations to make indices more unique
  index = hash % tableSize; // % modulo takes remainder which signifies index 
  
  return index;
}

void hash::AddItem(string name, string drink) {
  int index = Hash(name);  // return bucket to be stored in
  if(HashTable[index]->name == "empty) { // still default
    HashTable[i]->name = name;
    HashTable[i]->drink = drink;
  }
  else { // already overwritten
    item* Ptr = HashTable[index]; // points to the beginning of index
    item* n = new item;  // pointer for new item being added
    n->name = name;
    n->drink = drink;
    n->next = NULL;
    while(Ptr->next != NULL){ // traverse list until at the end
      Ptr = Ptr->next; 
    }
    Ptr->next = n; // end now points to the newly created item
  }
}

int hash::NumberOfItemsInIndex(int index) {
  int count = 0;
  
  if(HashTable[index]->name == "empty") // nothing is in the bucket, same value set by constructor
    return count;
  else {
    count++;
    item* Ptr = HashTable[index]; // point to beginning of list
    while(Ptr->next != NULL) { // traverse list until at the end
      Ptr = Ptr->next;
      count++;
    }
  }

}

void hash::PrintTable() {
  int number; // hold numbers of elements in each bucket
  
  for(int i = 0; i < tableSize; i++) {  // represent bucket being seen
    number = NumberOfItemsInIndex(i);
    cout << endl << "index = " << i << endl;
    cout << HashTable[i]->name << endl;
    cout << HashTable[i]->drink << endl;
    cout << "# of items = " << number << endl;
  }
}

void hash::PrintItemsInIndex(int index) {
  item* Ptr = HashTable[index];
  if(Ptr->name == "empty")
    cout << "Bucket " << index << " is empty." << endl;
  else {
    cout << "Bucket " << index << " contains:" << endl;
    while(Ptr != NULL) {
      cout << Ptr->name << endl;
      cout << Ptr->drink << endl << endl;
      Ptr = Ptr->next; 
    }
  }
}

void hash::FindDrink(string name){
  int index = Hash(name); // returns index of where hash value should be
  bool foundName = false;
  string drink;
  
  item* Ptr = HashTable[index]; // points to first item in bucket
  while(Ptr != NULL) {
    if (Ptr->name == name) {  // name found
      foundName = true;
      drink == Ptr->drink;
    }
    Ptr = Ptr->next;
  }
  if (foundName == true)
    cout << "Favorite drink = " << drink << endl;
  else
    cout << name << "'s info was not found in the Table" << endl;
  
}



// main cpp
// #include "hash.h"

int main () {
   
  hash HashObj;
  HashObj.PrintTable(); // should print 'empty' for all buckets
  
  // you may test by adding a bunch of names and drinks
  HashObj.AddItem("Tahj", "Water");
  
  
  return 0;
  }
